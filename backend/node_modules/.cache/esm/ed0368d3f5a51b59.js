"use strict";;let express,bodyParser,verif,isAuth,authCodeEmail,codeGetPointImportant,codeRegisterMessage,codePointImportant,codeUpdatePointImportant,codeDeletePointImportant,codeAlarme,codeGetTrajet,codeRechercherTrajet,codeEnregistrerTrajet,codeUpdateTrajet,codeRegisterDemande,codeGetDemandeUser,codeGetDemande,codeUpdateDemandeStatus,codeNotification;_f5a‍.x([["map",()=>route]]);_f5a‍.w("express",[["default",["express"],function(v){express=v}]]);_f5a‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_f5a‍.w("../../serviceLayer/service/verif.mjs",[["verif",["verif"],function(v){verif=v}]]);_f5a‍.w("../../serviceLayer/service/isAuth.mjs",[["isAuth",["isAuth"],function(v){isAuth=v}]]);_f5a‍.w("../../serviceLayer/code_data.mjs",[["authCodeEmail",["authCodeEmail"],function(v){authCodeEmail=v}]]);_f5a‍.w("../../serviceLayer/code_map.mjs",[["codeGetPointImportant",["codeGetPointImportant"],function(v){codeGetPointImportant=v}],["codeRegisterMessage",["codeRegisterMessage"],function(v){codeRegisterMessage=v}],["codePointImportant",["codePointImportant"],function(v){codePointImportant=v}],["codeUpdatePointImportant",["codeUpdatePointImportant"],function(v){codeUpdatePointImportant=v}],["codeDeletePointImportant",["codeDeletePointImportant"],function(v){codeDeletePointImportant=v}],["codeAlarme",["codeAlarme"],function(v){codeAlarme=v}],["codeGetTrajet",["codeGetTrajet"],function(v){codeGetTrajet=v}],["codeRechercherTrajet",["codeRechercherTrajet"],function(v){codeRechercherTrajet=v}],["codeEnregistrerTrajet",["codeEnregistrerTrajet"],function(v){codeEnregistrerTrajet=v}],["codeUpdateTrajet",["codeUpdateTrajet"],function(v){codeUpdateTrajet=v}],["codeRegisterDemande",["codeRegisterDemande"],function(v){codeRegisterDemande=v}],["codeGetDemandeUser",["codeGetDemandeUser"],function(v){codeGetDemandeUser=v}],["codeGetDemande",["codeGetDemande"],function(v){codeGetDemande=v}],["codeUpdateDemandeStatus",["codeUpdateDemandeStatus"],function(v){codeUpdateDemandeStatus=v}],["codeNotification",["codeNotification"],function(v){codeNotification=v}]]);































const route = express.Router();


route.use(bodyParser.urlencoded({
    extended: true
}));
route.use(express.json());



route.post("/contactUs", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, message} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if (verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        }  else {

            res.status(200);
            codeRegisterMessage(email, message).then((result) => {
                res.send({
                    message: result
                });
            });
        }

    } catch (error) {

        _f5a‍.g.console.log('Contact us error : ' + error);
        res.send({
            message: error
        });
        res.status(500);
    }
});


//#region point important

route.post("/getPointImportant", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const email = req.body.email;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verfi vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message: verifData.message
            });

        } else {

            res.status(200);

             // return les points importants
            codeGetPointImportant(email).then((result) => {
                res.send({
                    message: result
                });
            });
        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Get points important error : ' + error);
        res.send({
            message: 'Get points important error : ' + error
        });
    }
});

route.post("/pointImportant", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');

    const {email, message, latitude, longitude, sonner} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if (verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });
        } else {

            res.status(200);

            // * enregistrer le point 
            codePointImportant(email, message, latitude, longitude, sonner).then((result) => {
                res.send({
                    message: result
                });
            });
        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Point important error : ' + error);
        res.send({
            message: error
        });
    }
});

route.post("/updatePoint", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {id, email, message, sonner} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeUpdatePointImportant(id, message, sonner).then((result) => {
                res.send({
                    message: result
                });
            });
        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Update point important error : ' + error);
        res.send({
            message: error
        });
    }
});

route.post("/deletePoint", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {id, email} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeDeletePointImportant(id).then( (result) => {
                res.send({
                    message: result
                });
            });
        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Delete point important error : ' + error);
        res.send({
            message: error
        });
    }

});

route.post("/alarme", async (req, res) => {
    
    // * cette route permet de savoir si la position reçue est proche d'un des points importants de l'utilisateur

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, latitude, longitude} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeAlarme(email, parseFloat(latitude), parseFloat(longitude)).then( (result) => {
                res.send({
                    isDist : result.isDist,
                    libelle : result.libelle
                });
            });

        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Alarme error : ' + error);
        res.send({
            message: error
        });
    }
    
});

//#endregion


//#region trajet

route.post("/getTrajet", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeGetTrajet(email).then((result) => {
                res.send({
                    message: result
                });
            });

        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Get trajet error : ' + error);
        res.send({
            message: error
        });
    }

});

route.post("/rechercherTrajet", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, adresseDepart, adresseArrive} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeRechercherTrajet(email, adresseDepart, adresseArrive).then( (result) => {
                res.send({
                    message: result
                });
            });

        }
    } catch(error) {

        res.status(500);
        _f5a‍.g.console.log('Rechercher trajet error : ' + error);
        res.send({
            message : error
        });
    }

});

route.post("/enregistrerTrajet", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {nom, prenom, email, numero, adresseDepart, adresseArrive, heureTrajet, dateTrajet, options, escale, tarifTotal, tarifEscale} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeEnregistrerTrajet(nom, prenom, email, numero, adresseDepart, adresseArrive, heureTrajet, dateTrajet, options, escale, tarifTotal, tarifEscale).then((result) => {
                res.send({
                    message: result
                });
            });

        }

    } catch(error) {

        res.status(500);
        _f5a‍.g.console.log('Enregistrer trajet error : ' + error);
        res.send({
            message : error
        });
    }
});

route.post("/updateTrajet", async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {id, email, adresseDepart, adresseArrive, heureTrajet, dateTrajet, options, escale, tarifTotal, tarifEscale} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeUpdateTrajet(id, adresseDepart, adresseArrive, heureTrajet, dateTrajet, options, escale, tarifTotal, tarifEscale).then((result) => {
                res.send({
                    message: result
                });
            });

        }

    } catch (error) {
        res.status(500);
        _f5a‍.g.console.log('Update trajet error : ' + error);
        res.send({
            message: error
        });
    }
});

//#endregion


//#region demandes

route.post('/registerDemande', async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {emailChauffeur, emailVoyageur, adresseDepart, adresseArrive, dateTrajet, heureTrajet, tarif} = req.body;

    try {

        const verifData = await verif(authorization, emailVoyageur);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe
        // * on vérifie ici avec l'email du voyageur car il c'est normalement que lui qui peut enregistrer une demande

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeRegisterDemande(emailChauffeur, emailVoyageur, adresseDepart, adresseArrive, dateTrajet, heureTrajet, tarif).then ( (result) => {

                res.send({
                    message : result
                });
            });
        }

    } catch (error) {

        res.status(500);
        _f5a‍.g.console.log('Register demande error : ' + error);
        return error;
    }
});

route.post('/getDemandeUser', async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, typeUser} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeGetDemandeUser(email, typeUser).then( (result) => {
                res.send({
                    message : result
                });
            });
        }

    } catch (error) {
        res.status(500);
        _f5a‍.g.console.log('Get demande error : ' + error);
        return error;
    }
});

route.post('/getDemande', async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeGetDemande().then( (result) => {
                res.send({
                    message : result
                });
            });
        }

    } catch (error) {
        res.status(500);
        _f5a‍.g.console.log('Get demande error : ' + error);
        return error;
    }
});

route.post('/updateDemande', async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, id, status} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeUpdateDemandeStatus(id, status).then( (result) => {
                res.send({
                    message : result
                });
            });
        }

    } catch (error) {
        res.status(500);
        _f5a‍.g.console.log('Get demande error : ' + error);
        return error;
    }
});

//#endregion


//#region notifications

route.post('/notifications', async (req, res) => {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, typeUser} = req.body;

    try {
        
        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            codeNotification(email, typeUser).then( (result) => {

                res.send({
                    length : result
                });
            });

        }

    } catch (error) {
        _f5a‍.g.console.log('Notification error : ' + error);
    }
});
//#endregion



