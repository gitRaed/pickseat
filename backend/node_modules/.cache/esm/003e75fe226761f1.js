"use strict";;let getPointImportant,registerMessage,registerPointImportant,updatePointImportant,deletePointImportant,getTrajet,rechercherTrajet1,rechercherEscale,enregistrerTrajet,updateTrajet,deleteTrajet,distance;_226‍.x([["codeRegisterMessage",()=>codeRegisterMessage],["codeGetPointImportant",()=>codeGetPointImportant],["codePointImportant",()=>codePointImportant],["codeUpdatePointImportant",()=>codeUpdatePointImportant],["codeDeletePointImportant",()=>codeDeletePointImportant],["codeGetTrajet",()=>codeGetTrajet],["codeRechercherTrajet",()=>codeRechercherTrajet],["codeEnregistrerTrajet",()=>codeEnregistrerTrajet],["codeUpdateTrajet",()=>codeUpdateTrajet],["codeDeleteTrajet",()=>codeDeleteTrajet]]);_226‍.w("../dataAccessLayer/requete_map.mjs",[["getPointImportant",["getPointImportant"],function(v){getPointImportant=v}],["registerMessage",["registerMessage"],function(v){registerMessage=v}],["registerPointImportant",["registerPointImportant"],function(v){registerPointImportant=v}],["updatePointImportant",["updatePointImportant"],function(v){updatePointImportant=v}],["deletePointImportant",["deletePointImportant"],function(v){deletePointImportant=v}],["getTrajet",["getTrajet"],function(v){getTrajet=v}],["rechercherTrajet1",["rechercherTrajet1"],function(v){rechercherTrajet1=v}],["rechercherEscale",["rechercherEscale"],function(v){rechercherEscale=v}],["enregistrerTrajet",["enregistrerTrajet"],function(v){enregistrerTrajet=v}],["updateTrajet",["updateTrajet"],function(v){updateTrajet=v}],["deleteTrajet",["deleteTrajet"],function(v){deleteTrajet=v}]]);_226‍.w("./distance.mjs",[["distance",["distance"],function(v){distance=v}]]);





















       async function codeRegisterMessage(email, message) {

    return registerMessage(email, message);
}

//#region pointImportant
       async function codeGetPointImportant(email) {

    return getPointImportant(email).then( (result) => {

        let data = [];

        for(let i = 0, n = result.length; i < n; i++) {

            data.push({
                id_points : result[i].id_points,
                message : result[i].message,
                latitude : result[i].latitude,
                longitude : result[i].longitude 
            });
        }

        return data;
    });
}

       async function codePointImportant(email, message, latitude, longitude) {

    return registerPointImportant(email, message, latitude, longitude);
}

       async function codeUpdatePointImportant(id, message) {

    return updatePointImportant(id, message);
}

       async function codeDeletePointImportant(id) {

    return deletePointImportant(id);
}
//#endregion

//#region trajet
       async function codeGetTrajet(email) {

    return getTrajet(email);
}

       async function codeRechercherTrajet(adresse_depart, adresse_arrive, heure_trajet, date_trajet) {

    return rechercherTrajet1(adresse_depart, adresse_arrive).then( (result) => {

        if(result.length === 0) {

            return codeRechercherEscale(adresse_depart, adresse_arrive);
        } else {

            return result;
        }
    });
}

async function codeRechercherEscale(adresse_depart, adresse_arrive) {

    let tableau = [];
    await rechercherEscale().then( (result) => {

        for(let i = 0, n = result.length; i < n; i++) {

            let escale = result[i].escale;

            if (escale === adresse_arrive){
                const isDistanceGood = distance(adresse_depart, result[i].adresse_depart);

                if(isDistanceGood === true)
                    tableau.push(result[i]);
            }          
        }

    });

    return tableau;
}

       async function codeEnregistrerTrajet(nom_chauffeur, prenom_chauffeur, email_chauffeur, numero_chauffeur, adresse_depart, adresse_arrive, heure_trajet, date_trajet, options, escale) {

    return enregistrerTrajet(nom_chauffeur, prenom_chauffeur, email_chauffeur, numero_chauffeur, adresse_depart, adresse_arrive, heure_trajet, date_trajet, options, escale);
}

       async function codeUpdateTrajet(id, adresse_depart, adresse_arrive, heure_trajet, date_trajet, options, escale) {

    return updateTrajet(id, adresse_depart, adresse_arrive, heure_trajet, date_trajet, options, escale);
}

       async function codeDeleteTrajet(id) {

    return deleteTrajet(id);
}
//#endregion