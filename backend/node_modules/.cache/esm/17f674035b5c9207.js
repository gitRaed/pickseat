let nodeGeocoder,geo;_5b5‍.x([["distance",()=>distance],["addressToCoordinate",()=>addressToCoordinate],["distanceForAlarm",()=>distanceForAlarm]]);_5b5‍.w("node-geocoder",[["default",["nodeGeocoder"],function(v){nodeGeocoder=v}]]);_5b5‍.w("geolocation-utils",[["*",null,function(v){geo=v}]]);


let options = {
    provider: 'openstreetmap'
};

let geocoder = nodeGeocoder(options);

       async function distance(adresse_depart_user, adresse_arrive_user, adresse_depart_chauffeur, adresse_arrive_chauffeur) {

    let bool = false;

    const depart_user = await addressToCoordinate(adresse_depart_user);
    let arrive_user;

    const depart_chauffeur = await addressToCoordinate(adresse_depart_chauffeur);
    let arrive_chauffeur;

    
    const isDistanceGood = await distanceBetweenAdress(depart_user, depart_chauffeur); 
    // * isDistanceGood = true si la distance entre les 2 adresses est inférieure ou égale à 1km
    
    if (isDistanceGood === true) {
        bool = true;
        arrive_user = await addressToCoordinate(adresse_arrive_user);
        arrive_chauffeur = await addressToCoordinate(adresse_arrive_chauffeur);
    }

    return {
        bool : bool,
        depart_user : depart_user,
        arrive_user : arrive_user,
        depart_chauffeur : depart_chauffeur,
        arrive_chauffeur : arrive_chauffeur
    };
}

       async function addressToCoordinate(adresse) {

    return geocoder.geocode(adresse)
            .then( (res) => {

                return {
                    lat: res[0].latitude,
                    lng: res[0].longitude
                };
            })
            .catch( (error) => {
                _5b5‍.g.console.log('Adress to coordinates error : ' + error);
            });
}     

async function distanceBetweenAdress(coords_user, coords_chauffeur) {

    try {
        
        let distance = geo.headingDistanceTo(coords_user, coords_chauffeur);
        let isDistanceGood = false;

        if (distance.distance <= 1000 ) {
            isDistanceGood = true;
        }

        return isDistanceGood;

    } catch (error) {
        _5b5‍.g.console.log('distance between adress error : ' + error);
    }
}

       async function distanceForAlarm(coords_user, coords_point) {

    try {
        
        let distance = geo.headingDistanceTo(coords_user, coords_point);
        let isDistanceGood = false;

        if (distance.distance <= 100) {
            isDistanceGood = true;
        }

        return isDistanceGood;

    } catch (error) {
        _5b5‍.g.console.log('Distance for alarm error : ' + error);
    }
}