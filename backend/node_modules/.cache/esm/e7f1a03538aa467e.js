"use strict";;let express,bodyParser,getUser,updateUser,deleteUser,authCode,authCodeEmail,banCode,suspendCode,normalCode,verif,createAccessToken;_38a‍.x([["data",()=>route]]);_38a‍.w("express",[["default",["express"],function(v){express=v}]]);_38a‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_38a‍.w("../../serviceLayer/code_data.mjs",[["getUser",["getUser"],function(v){getUser=v}],["updateUser",["updateUser"],function(v){updateUser=v}],["deleteUser",["deleteUser"],function(v){deleteUser=v}],["authCode",["authCode"],function(v){authCode=v}],["authCodeEmail",["authCodeEmail"],function(v){authCodeEmail=v}],["banCode",["banCode"],function(v){banCode=v}],["suspendCode",["suspendCode"],function(v){suspendCode=v}],["normalCode",["normalCode"],function(v){normalCode=v}]]);_38a‍.w("../../serviceLayer/service/verif.mjs",[["verif",["verif"],function(v){verif=v}]]);_38a‍.w("../../serviceLayer/service/token.mjs",[["createAccessToken",["createAccessToken"],function(v){createAccessToken=v}]]);




















const route = express.Router();

route.use(bodyParser.urlencoded({
    extended: true
}));
route.use(express.json());


route.post("/getData", async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData !== '') {

            res.status(400);
            res.send({
                message : verifData
            });

        } else {

            res.status(200);

            getUser(email).then((result) => {
                res.send(result);
            });
        }

    } catch (error) {

        res.status(500);
        _38a‍.g.console.log('Get data error : ' + error);
    }

});


//#region optionsUser
route.post('/ban', async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, id, nom, prenom} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            banCode(id).then(() => {
                res.json({
                    message: 'Utilisateur banni : ' + nom + ' ' + prenom
                });
            });
            
        }

    } catch (error) {
        res.status(500);
        _38a‍.g.console.log('Ban user error : ' + error);
    }

});

route.post('/suspend', async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, id, nom, prenom} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            suspendCode(id).then(() => {

                res.json({
                    message: 'Utilisateur suspendu : ' + nom + ' ' + prenom
                });
            });

        }

    } catch (error) {
        res.status(500);
        _38a‍.g.console.log('Suspendre user error : ' + error);
    }

});

route.post('/normal', async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, id, nom, prenom} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            normalCode(id).then(() => {

                res.json({
                    message: 'Utilisateur remis actif : ' + nom + ' ' + prenom
                });
            });
        }

    } catch (error) {
        res.status(500);
        _38a‍.g.console.log('Normal user error : ' + error);
    }

});

route.post('/updateData', async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {emailVerif, id, nom, prenom, email,numero, typeUser} = req.body;

    try {

        const verifData = await verif(authorization, emailVerif);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            // console.log(id, nom, prenom, email, numero, typeUser, motDePasse);
            updateUser(id, nom, prenom, email, numero, typeUser).then(() => {

                res.json({
                    message: 'Données de ' + nom + ' ' + prenom + ' modifiées ! '
                });
            });
        }

    } catch (error) {
        res.status(500);
        _38a‍.g.console.log('Update data error : ' + error);
    }

});

route.post('/deleteData', async function (req, res) {

    const authorization = req.headers.authorization.valueOf('authorization');
    const {email, id, nom, prenom} = req.body;

    try {

        const verifData = await verif(authorization, email);
        // * la fonction verif vérifie si le token existe et si l'utilisateur existe

        if(verifData.bool === false) {

            res.status(400);
            res.send({
                message : verifData.message
            });

        } else {

            res.status(200);

            deleteUser(id).then(() => {

                res.json({
                    message: 'Utilisateur ' + nom + ' ' + prenom + ' supprimé !'
                });
            });

        }

    } catch (error) {
        res.status(500);
        _38a‍.g.console.log('Delete user error : ' + error);
    }

});

//#endregion


// *la premiere condition gère les authentification et la deuxieme les enregistrements
// TODO: Séparer authentification et register en 2 routes distinctes
route.get('/auth/:email/:mdp/:type', async function (req, res) {

    const email = req.params.email;
    const motDePasse = req.params.mdp;
    const type = req.params.type;
    
    // si type === auth, check si le mdp et email sont bien disponible, 
    // si type === register, juste check si l'email est disponible
    if (type === 'auth') {
        authCode(email, motDePasse).then((result) => {

            // si le user est authentifié, envoyer un accessToken en reponse normal
            if (result.auth === true) {
                result.token = createAccessToken();
            }

            res.send(result);
        });

    } else if (type === 'register') {

        authCodeEmail(email).then((result) => {

            res.send(result);
        });
    }
});



